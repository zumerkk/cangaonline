const mongoose = require('mongoose');

// üçΩÔ∏è Yemek molasƒ± hesaplama fonksiyonu
const calculateWorkingHours = (timeSlot) => {
  if (!timeSlot || typeof timeSlot !== 'string') return 8; // Varsayƒ±lan 8 saat
  
  // Saat aralƒ±ƒüƒ±ndan ba≈ülangƒ±√ß ve biti≈ü saatlerini √ßƒ±kar
  const [startTime, endTime] = timeSlot.split('-');
  if (!startTime || !endTime) return 8;
  
  // Saat:dakika formatƒ±nƒ± parse et
  const parseTime = (timeStr) => {
    const [hours, minutes] = timeStr.split(':').map(Number);
    return hours + (minutes || 0) / 60;
  };
  
  const startHour = parseTime(startTime);
  let endHour = parseTime(endTime);
  
  // Gece vardiyasƒ± i√ßin (24:00 veya 00:00 ge√ßen saatler)
  if (endHour <= startHour) {
    endHour += 24;
  }
  
  // Br√ºt √ßalƒ±≈üma saati
  const grossHours = endHour - startHour;
  
  // üçΩÔ∏è Yemek molasƒ± hesaplama kurallarƒ±
  // 08:00-18:00 (10 saat) -> 1 saat yemek molasƒ± d√º≈ü = 9 saat
  // Diƒüer t√ºm vardiyalar -> 30 dk (0.5 saat) yemek molasƒ± d√º≈ü
  if (timeSlot === '08:00-18:00') {
    return grossHours - 1; // 10 - 1 = 9 saat
  } else {
    // Diƒüer t√ºm vardiyalar i√ßin 30 dk d√º≈ü
    return grossHours - 0.5; // √ñrnek: 8 - 0.5 = 7.5 saat
  }
};

// Vardiya ≈ûemasƒ± - Excel'deki yapƒ±ya g√∂re tasarlandƒ±
const shiftSchema = new mongoose.Schema({
  // Vardiya Temel Bilgileri
  title: {
    type: String,
    required: true,
    trim: true
  },
  
  // Tarih Bilgileri
  startDate: {
    type: Date,
    required: true
  },
  endDate: {
    type: Date,
    required: true
  },
  
  // Lokasyon - Excel'e g√∂re g√ºncellendi + Dinamik lokasyon desteƒüi
  location: {
    type: String,
    required: true,
    trim: true
    // enum kaldƒ±rƒ±ldƒ± - yeni lokasyonlarƒ±n dinamik olarak eklenmesini saƒülar
  },
  
  // Fabrika Genel Sorumlusu - Excel'de g√∂r√ºlen bilgi
  generalManager: {
    name: {
      type: String,
      default: function() {
        // Lokasyona g√∂re varsayƒ±lan sorumlu
        if (this.location === 'ƒ∞≈ûL') return 'BATUHAN ƒ∞LHAN';
        return 'Bƒ∞LAL CEVƒ∞ZOƒûLU';
      }
    },
    title: {
      type: String,
      default: 'FABRƒ∞KA GENEL SORUMLUSU'
    }
  },
  
  // B√∂l√ºm Sorumlusu - Excel'de g√∂r√ºlen ikinci sorumlu
  departmentManager: {
    name: {
      type: String,
      default: function() {
        // Lokasyona g√∂re varsayƒ±lan b√∂l√ºm sorumlusu
        if (this.location === 'ƒ∞≈ûL') return 'BATUHAN ƒ∞LHAN';
        return 'MURAT √áAVDAR';
      }
    },
    title: {
      type: String,
      default: 'B√ñL√úM SORUMLUSU'
    }
  },
  
  // Ustaba≈üƒ± bilgisi - Excel'de g√∂r√ºlen
  supervisor: {
    name: {
      type: String,
      default: function() {
        // Lokasyona g√∂re varsayƒ±lan ustaba≈üƒ±
        if (this.location === 'ƒ∞≈ûL') {
          return 'ALƒ∞ ≈ûƒ∞≈û YORULMAZ'; // ƒ∞≈ûL i√ßin
        }
        return 'MURAT SEPET√áƒ∞'; // MERKEZ i√ßin
      }
    },
    title: {
      type: String,
      default: 'USTABA≈ûI'
    }
  },

  // Vardiya Gruplarƒ± - resimlerden √ßƒ±kardƒ±ƒüƒ±m yapƒ±
  shiftGroups: [{
    // Grup Bilgileri - Excel'e g√∂re basitle≈ütirildi + Dinamik grup adlarƒ±
    groupName: {
      type: String,
      required: true,
      trim: true,
      minlength: 1,
      maxlength: 100
      // Enum kaldƒ±rƒ±ldƒ± - dinamik departman isimlerini desteklemek i√ßin
    },
    
    // B√∂l√ºm Sorumlusu (opsiyonel - bazƒ± b√∂l√ºmlerin kendi sorumlusu var)
    sectionManager: {
      name: String,
      title: {
        type: String,
        default: 'B√ñL√úM SORUMLUSU'
      }
    },
    
    // Ustaba≈üƒ± (opsiyonel - bazƒ± b√∂l√ºmlerin kendi ustaba≈üƒ±sƒ± var)
    sectionSupervisor: {
      name: String,
      title: {
        type: String,
        default: 'USTABA≈ûI'
      }
    },
    
    // Vardiya Saatleri
    shifts: [{
      // Saat Aralƒ±ƒüƒ± - Dinamik saat aralƒ±klarƒ± desteklenir
      timeSlot: {
        type: String,
        required: true,
        trim: true,
        validate: {
          validator: function(v) {
            // Saat formatƒ± kontrol√º: HH:MM-HH:MM (24:00 gece vardiyasƒ± i√ßin ge√ßerli)
            const timeSlotRegex = /^([01]?[0-9]|2[0-4]):[0-5][0-9]-([01]?[0-9]|2[0-4]):[0-5][0-9]$/;
            
            if (!timeSlotRegex.test(v)) return false;
            
            // 24:XX sadece 24:00 olabilir (gece vardiyasƒ± biti≈ü saati)
            const [startTime, endTime] = v.split('-');
            if (startTime.startsWith('24:') && startTime !== '24:00') return false;
            if (endTime.startsWith('24:') && endTime !== '24:00') return false;
            
            return true;
          },
          message: 'Saat aralƒ±ƒüƒ± formatƒ± HH:MM-HH:MM ≈üeklinde olmalƒ±dƒ±r (√∂rn: 08:00-18:00, 16:00-24:00)'
        }
        // enum kaldƒ±rƒ±ldƒ± - kullanƒ±cƒ±lar √∂zel saat aralƒ±klarƒ± girebilir
      },
      
      // Bu saatte √ßalƒ±≈üacak personeller
      employees: [{
        employeeId: {
          type: mongoose.Schema.Types.ObjectId,
          ref: 'Employee',
          required: true
        },
        name: String, // Hƒ±zlƒ± eri≈üim i√ßin
        
        // Giri≈ü-√áƒ±kƒ±≈ü Saatleri (Excel'de g√∂r√ºlen yapƒ±)
        entryTime: String,  // Giri≈ü saati
        exitTime: String,   // √áƒ±kƒ±≈ü saati
        signature: String,  // ƒ∞mza alanƒ±
        
        // Durum bilgileri
        status: {
          type: String,
          default: 'PLANLANDI',
          enum: ['PLANLANDI', 'GELDƒ∞', 'Gƒ∞TTƒ∞', 'DEVAMSIZ', 'ƒ∞Zƒ∞NLƒ∞']
        }
      }],
      
      // Vardiya toplam saat - YENƒ∞ HESAPLAMA ƒ∞LE
      totalHours: {
        type: Number,
        default: function() {
          // Yemek molasƒ± d√º≈üerek hesapla
          return calculateWorkingHours(this.timeSlot);
        }
      }
    }]
  }],
  
  // √ñzel √áalƒ±≈üma Gruplarƒ± - √ñrneklerdeki gruplar
  specialGroups: [{
    groupType: {
      type: String,
      enum: [
        'STAJYER √ñƒûRENCƒ∞ Lƒ∞SE',
        '√áIRAK Lƒ∞SE', 
        'FAZLA √áALI≈ûMA Lƒ∞STESƒ∞',
        'ƒ∞DARƒ∞ KISIM',
        '√ñZEL G√úVENLƒ∞K',
        'TEKNƒ∞K OFƒ∞S / BAKIM ONARIM'
      ]
    },
    timeSlot: String,
    employees: [{
      employeeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Employee'
      },
      name: String,
      entryTime: String,
      exitTime: String,
      signature: String,
      status: {
        type: String,
        default: 'PLANLANDI',
        enum: ['PLANLANDI', 'GELDƒ∞', 'Gƒ∞TTƒ∞', 'DEVAMSIZ', 'ƒ∞Zƒ∞NLƒ∞']
      }
    }]
  }],
  
  // Vardiya Durumu
  status: {
    type: String,
    default: 'TASLAK',
    enum: ['TASLAK', 'ONAYLANDI', 'YAYINLANDI', 'TAMAMLANDI', 'ƒ∞PTAL']
  },
  
  // Onay Bilgileri
  approvals: [{
    approver: String, // Onaylayan ki≈üi
    role: String,     // Rol√º (Fabrika Sorumlusu, ƒ∞K vs.)
    approvedAt: Date,
    notes: String
  }],
  
  // Gece Vardiyasƒ± Bilgisi (Excel'de sarƒ± ile i≈üaretli alanlar)
  nightShiftNote: {
    type: String,
    default: "24:00-08:00 GECE VARDƒ∞YASI PAZARTESI'Yƒ∞ SALIYA BAƒûLAYAN GECE BA≈ûLAYACAKTIR"
  },
  
  // Vardiya a√ßƒ±klamasƒ±
  description: {
    type: String,
    trim: true
  },
  
  // Olu≈üturan ve Son G√ºncelleyen
  createdBy: {
    type: String,
    required: true
  },
  updatedBy: String,
  
  // Tarihler
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Middleware - g√ºncelleme tarihi
shiftSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

// Virtual - toplam √ßalƒ±≈üan sayƒ±sƒ±
shiftSchema.virtual('totalEmployees').get(function() {
  let total = 0;
  this.shiftGroups.forEach(group => {
    group.shifts.forEach(shift => {
      total += shift.employees.length;
    });
  });
  this.specialGroups.forEach(group => {
    total += group.employees.length;
  });
  return total;
});

// Index'ler
shiftSchema.index({ startDate: 1, endDate: 1 });
shiftSchema.index({ location: 1, status: 1 });
shiftSchema.index({ 'shiftGroups.groupName': 1 });

module.exports = mongoose.model('Shift', shiftSchema); 